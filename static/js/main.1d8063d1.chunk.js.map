{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","value","style","backgroundColor","color","onChange","event","console","log","target","placeholder","rows","justify-content","newText","toUpperCase","showAlert","toLowerCase","split","map","el","charAt","slice","join","repval","prompt","tobereplaced","RegExp","toreplace","replace","document","getElementById","select","navigator","clipboard","writeText","length","Alert","alert","word","lower","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1d8063d1.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {\r\n//  Link\r\n//   } from \"react-router-dom\";\r\n \r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      {/* <b><Link className=\"navbar-brand\" to=\"/\">{props.title}</Link></b> */}\r\n      <b><a className=\"navbar-brand\" href=\"\">{props.title}</a></b>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            {/* <b><Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link></b> */}\r\n            <b><a className=\"nav-link active\" aria-current=\"page\" href=\"\">Home</a></b>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n          <b> <Link className=\"nav-link\" to=\"/about\">About</Link></b>\r\n          </li> */}\r\n          \r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        <div className={`form-check form-switch text-${props.mode=== 'light'? 'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\"  role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">DarkMode</label>\r\n</div >\r\n<div className={`text-${props.mode=== 'light'? 'light':'dark' }`}><label> ...</label></div>\r\n<div className={`form-check form-switch text-${props.mode=== 'light'? 'dark':'light' }`}  >\r\n<label>LightMode</label>\r\n</div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string,\r\n    \r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        \r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase !\", \"success\");\r\n    }\r\n\r\n    const handleDownClick = () => {\r\n        \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase !\", \"success\");\r\n    }\r\n    \r\n    const handleClear = () => {\r\n        \r\n        let newText = ' ';\r\n        setText(newText)\r\n        props.showAlert(\"Cleared the text !\", \"success\");\r\n    }\r\n\r\n    const handleFirstLetter = () => {\r\n        let newText = text.split(\" \").map(el => el.charAt(0).toUpperCase() + el.slice(1)).join(\" \");\r\n        setText(newText);\r\n        props.showAlert(\"Converted First letter of every word to uppercase !\", \"success\");\r\n      };\r\n\r\n      const replaceString=()=>{\r\n        let repval=prompt(\"Enter the word to be replaced:\")\r\n        let tobereplaced= new RegExp(repval,'g');\r\n  \r\n        let toreplace=prompt(\"Enter the text that you want to replace with:\");\r\n        \r\n        let newText= text.replace(tobereplaced,toreplace);\r\n        setText(newText);\r\n        props.showAlert(\"Replaced the targeted word !\", \"success\");\r\n      }\r\n\r\n      const handleCopy =() => {\r\n      var text = document.getElementById(\"myBox\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"Copied to Clipboard !\", \"success\");\r\n      }\r\n\r\n      const handleExtraSpaces =() => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed Extra Spaces !\", \"success\");\r\n      }\r\n\r\n    const handleOnChange = (event) => {\r\n        console.log(\"On Change\")\r\n        setText(event.target.value);\r\n    }\r\n\r\n    \r\n    const [text, setText] = useState('');\r\n  \r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n\r\n\r\n                    <textarea className=\"form-control\" id=\"myBox\" value={text} style={{backgroundColor : props.mode==='light'?'white':'rgba(255, 255, 255, 0.55)', color: props.mode==='dark'?'white':'black' }} onChange={handleOnChange} placeholder=\"Input Text here\" rows=\"8\" />\r\n                    \r\n                   \r\n                    \r\n                \r\n                </div>\r\n                <div className='container' justify-content=\"space-between\">\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleUpClick} >Convert to UpperCase</button>\r\n                    <button className=\"btn btn-danger mx-2\" onClick={handleDownClick} >Convert to LowerCase</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleClear} >Clear Text</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleFirstLetter} >First letter capital</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={replaceString} >Replace</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleCopy} >Copy to clipboard</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces} >Remove extra spaces</button>\r\n                  \r\n\r\n                </div>\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n            <div className=\"container my-3\" style={{backgroundColor : props.mode==='light'?'white':'grey' }}>\r\n                <h1>Text Summary</h1>\r\n                <p>{text.split(\" \").length - 1} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n\r\n                <h2>Preview</h2>\r\n                <div style={{backgroundColor : props.mode==='light'?'white':'grey',color: props.mode==='dark'?'white':'black' }}>\r\n                <p>{text.length>0?text:\"Enter something in the textbox to prevview it here\"}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n} \r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  const capitalize =(word)=> {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong> {capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n    </div>\r\n  )\r\n}","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   } from \"react-router-dom\";\n \nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message,type) => {\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    },2000);\n  }\n \n  const toggleMode = () => {\n    if(mode==='light'){\n      setMode ('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title = 'Text Analyzer - Dark Mode';\n    }\n    else{\n      setMode ('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title = 'Text Analyzer - Light Mode';\n    }\n  }\n  return (\n    <div>\n      \n    {/* <Router> */}\n   <Navbar title=\"Text Analyzer\" mode={mode}  toggleMode={toggleMode} />\n   <Alert alert={alert}/>\n   <div className=\"container my-3\">\n   {/* <Routes>\n          <Route exact path=\"/about\" element= {<About />}/>\n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading =\" Enter the text to analyze below\" mode={mode}/>}/>\n   </Routes>\n   \n    */}\n    <TextForm showAlert={showAlert} heading =\" Enter the text to analyze below\" mode={mode}/>\n   </div>\n   {/* </Router> */}\n   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}